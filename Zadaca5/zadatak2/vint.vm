function vint.new 1
push constant 2
call Memory.alloc 1
pop pointer 0
push constant 1
pop this 1
push argument 0
push constant 0
lt
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 0
lt
not
if-goto WHILE_END0
push this 1
push this 1
add
pop this 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE0
push this 1
call Array.new 1
pop this 0
push pointer 0
return
function vint.len 0
push argument 0
pop pointer 0
push this 1
return
function vint.set 0
push argument 0
pop pointer 0
push argument 1
push this 0
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function vint.get 0
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
return
function vint.resize 4
push argument 0
pop pointer 0
push constant 1
pop local 1
push argument 1
push constant 0
lt
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
label IF_FALSE0
push local 1
call Array.new 1
pop local 3
push this 1
pop local 2
push local 1
push local 2
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
pop local 2
label IF_FALSE1
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push local 2
lt
not
if-goto WHILE_END1
push local 0
push local 3
add
push local 0
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push this 0
call Array.dispose 1
pop temp 0
push local 3
pop this 0
push local 1
pop this 1
push constant 0
return
function vint.is_eq 1
push argument 0
call vint.len 1
push argument 1
call vint.len 1
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 0
call vint.len 1
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop pointer 1
push that 0
push local 0
push argument 1
add
pop pointer 1
push that 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function vint.elems 3
push argument 0
call vint.len 1
push argument 1
call vint.len 1
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 0
push constant 0
push argument 0
call vint.len 1
call vint.quicksort 3
pop local 0
push argument 1
push constant 0
push argument 1
call vint.len 1
call vint.quicksort 3
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push argument 0
call vint.len 1
lt
not
if-goto WHILE_END0
push local 2
push local 0
add
pop pointer 1
push that 0
push local 2
push local 1
add
pop pointer 1
push that 0
eq
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function vint.dispose 0
push argument 0
pop pointer 0
push this 0
call Array.dispose 1
pop temp 0
push constant 0
return
function vint.quicksort 6
push argument 0
call vint.len 1
call Array.new 1
pop local 5
push constant 0
pop local 4
label WHILE_EXP0
push local 4
push argument 0
call vint.len 1
lt
not
if-goto WHILE_END0
push local 2
push local 5
add
push local 2
call V.get 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push argument 1
push argument 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push local 5
add
pop pointer 1
push that 0
pop local 0
push argument 1
pop local 1
push argument 1
push constant 1
add
pop local 2
label WHILE_EXP1
push local 2
push argument 2
gt
not
not
if-goto WHILE_END1
push local 2
push local 5
add
pop pointer 1
push that 0
push local 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push constant 1
add
pop local 1
push local 2
push local 5
add
pop pointer 1
push that 0
pop local 3
push local 2
push local 5
add
push local 1
push local 5
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 5
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE1
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
push local 5
add
pop pointer 1
push that 0
pop local 3
push local 1
push local 5
add
push argument 1
push local 5
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push local 5
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 5
push argument 1
push local 1
push constant 1
sub
call Sort.quicksort 3
pop local 5
push local 5
push local 1
push constant 1
add
push argument 2
call Sort.quicksort 3
pop local 5
label IF_FALSE0
push local 5
return
